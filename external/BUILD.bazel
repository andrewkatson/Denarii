package(
    default_visibility = ["//visibility:public"],
    features = ["no_copts_tokenization"],
)

licenses(["notice"])  # BSD/MIT-like license (for zlib)

config_setting(
    name = "windows",
    constraint_values = [
        "@platforms//os:windows",
    ],
    visibility = ["//visibility:public"],
)

config_setting(
    name = "mac",
    constraint_values = [
        "@platforms//os:macos",
    ],
    visibility = ["//visibility:public"],
)

config_setting(
    name = "linux",
    constraint_values = [
        "@platforms//os:linux",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "bigint",
    srcs = glob(["**/*.cpp"]),
    hdrs = glob(["**/bigint/**/*.h"]),
    includes = ["include"],
)

BASE_CURL_COPTS = [
    # Disable everything else except HTTP protocol.
    "-DHTTP_ONLY=1",
    "-DENABLE_IPV6=1",
    "-DGETHOSTNAME_TYPE_ARG2=size_t",
    "-DGETSERVBYPORT_R_ARGS=6",
    "-DGETSERVBYPORT_R_BUFSIZE=4096",
    "-DHAVE_ALARM=1",
    "-DHAVE_ALLOCA_H=1",
    "-DHAVE_ARPA_INET_H=1",
    "-DHAVE_ARPA_TFTP_H=1",
    "-DHAVE_ASSERT_H=1",
    "-DHAVE_BASENAME=1",
    "-DHAVE_BOOL_T=1",
    "-DHAVE_CLOCK_GETTIME_MONOTONIC=1",
    "-DHAVE_CONNECT=1",
    "-DHAVE_DLFCN_H=1",
    "-DHAVE_ENGINE_LOAD_BUILTIN_ENGINES=1",
    "-DHAVE_ERRNO_H=1",
    "-DHAVE_FCNTL=1",
    "-DHAVE_FCNTL_H=1",
    "-DHAVE_FCNTL_O_NONBLOCK=1",
    "-DHAVE_FDOPEN=1",
    "-DHAVE_FREEADDRINFO=1",
    "-DHAVE_FREEIFADDRS=1",
    "-DHAVE_FSETXATTR=1",
    "-DHAVE_FSETXATTR_5=1",
    "-DHAVE_FTRUNCATE=1",
    "-DHAVE_GAI_STRERROR=1",
    "-DHAVE_GETADDRINFO=1",
    "-DHAVE_GETADDRINFO_THREADSAFE=1",
    "-DHAVE_GETEUID=1",
    "-DHAVE_GETHOSTBYADDR=1",
    "-DHAVE_GETHOSTBYADDR_R=1",
    "-DHAVE_GETHOSTBYADDR_R_8=1",
    "-DHAVE_GETHOSTBYNAME=1",
    "-DHAVE_GETHOSTBYNAME_R=1",
    "-DHAVE_GETHOSTBYNAME_R_6=1",
    "-DHAVE_GETHOSTNAME=1",
    "-DHAVE_GETIFADDRS=1",
    "-DHAVE_GETNAMEINFO=1",
    "-DHAVE_GETPPID=1",
    "-DHAVE_GETPWUID=1",
    "-DHAVE_GETPWUID_R=1",
    "-DHAVE_GETRLIMIT=1",
    "-DHAVE_GETSERVBYPORT_R=1",
    "-DHAVE_GETTIMEOFDAY=1",
    "-DHAVE_GMTIME_R=1",
    "-DHAVE_IFADDRS_H=1",
    "-DHAVE_IF_NAMETOINDEX=1",
    "-DHAVE_INET_NTOP=1",
    "-DHAVE_INET_PTON=1",
    "-DHAVE_INTTYPES_H=1",
    "-DHAVE_IOCTL=1",
    "-DHAVE_IOCTL_FIONBIO=1",
    "-DHAVE_IOCTL_SIOCGIFADDR=1",
    "-DHAVE_LIBGEN_H=1",
    "-DHAVE_LL=1",
    "-DHAVE_LOCALE_H=1",
    "-DHAVE_LOCALTIME_R=1",
    "-DHAVE_LONGLONG=1",
    "-DHAVE_MALLOC_H=1",
    "-DHAVE_MEMORY_H=1",
    "-DHAVE_NETDB_H=1",
    "-DHAVE_NETINET_IN_H=1",
    "-DHAVE_NETINET_TCP_H=1",
    "-DHAVE_NET_IF_H=1",
    "-DHAVE_PIPE=1",
    "-DHAVE_POLL=1",
    "-DHAVE_POLL_FINE=1",
    "-DHAVE_POLL_H=1",
    "-DHAVE_POSIX_STRERROR_R=1",
    "-DHAVE_PTHREAD_H=1",
    "-DHAVE_PWD_H=1",
    "-DHAVE_RECV=1",
    "-DHAVE_SELECT=1",
    "-DHAVE_SEND=1",
    "-DHAVE_SETJMP_H=1",
    "-DHAVE_SETLOCALE=1",
    "-DHAVE_SETRLIMIT=1",
    "-DHAVE_SETSOCKOPT=1",
    "-DHAVE_SGTTY_H=1",
    "-DHAVE_SIGACTION=1",
    "-DHAVE_SIGINTERRUPT=1",
    "-DHAVE_SIGNAL=1",
    "-DHAVE_SIGNAL_H=1",
    "-DHAVE_SIGSETJMP=1",
    "-DHAVE_SIG_ATOMIC_T=1",
    "-DHAVE_SOCKADDR_IN6_SIN6_SCOPE_ID=1",
    "-DHAVE_SOCKET=1",
    "-DHAVE_SOCKETPAIR=1",
    "-DHAVE_STDBOOL_H=1",
    "-DHAVE_STDINT_H=1",
    "-DHAVE_STDIO_H=1",
    "-DHAVE_STDLIB_H=1",
    "-DHAVE_STRCASECMP=1",
    "-DHAVE_STRDUP=1",
    "-DHAVE_STRERROR_R=1",
    "-DHAVE_STRINGS_H=1",
    "-DHAVE_STRING_H=1",
    "-DHAVE_STRNCASECMP=1",
    "-DHAVE_STRSTR=1",
    "-DHAVE_STRTOK_R=1",
    "-DHAVE_STRTOLL=1",
    "-DHAVE_STRUCT_SOCKADDR_STORAGE=1",
    "-DHAVE_STRUCT_TIMEVAL=1",
    "-DHAVE_SYS_IOCTL_H=1",
    "-DHAVE_SYS_PARAM_H=1",
    "-DHAVE_SYS_POLL_H=1",
    "-DHAVE_SYS_RESOURCE_H=1",
    "-DHAVE_SYS_SELECT_H=1",
    "-DHAVE_SYS_SOCKET_H=1",
    "-DHAVE_SYS_STAT_H=1",
    "-DHAVE_SYS_TIME_H=1",
    "-DHAVE_SYS_TYPES_H=1",
    "-DHAVE_SYS_UIO_H=1",
    "-DHAVE_SYS_UN_H=1",
    "-DHAVE_SYS_WAIT_H=1",
    "-DHAVE_SYS_XATTR_H=1",
    "-DHAVE_TERMIOS_H=1",
    "-DHAVE_TERMIO_H=1",
    "-DHAVE_TIME_H=1",
    "-DHAVE_UNISTD_H=1",
    "-DHAVE_UTIME=1",
    "-DHAVE_UTIMES=1",
    "-DHAVE_UTIME_H=1",
    "-DHAVE_VARIADIC_MACROS_C99=1",
    "-DHAVE_VARIADIC_MACROS_GCC=1",
    "-DHAVE_WRITABLE_ARGV=1",
    "-DHAVE_WRITEV=1",
    "-DRECV_TYPE_ARG1=int",
    "-DRECV_TYPE_ARG2=void*",
    "-DRECV_TYPE_ARG3=size_t",
    "-DRECV_TYPE_ARG4=int",
    "-DRECV_TYPE_RETV=ssize_t",
    "-DRETSIGTYPE=void",
    "-DSELECT_QUAL_ARG5=",
    "-DSELECT_TYPE_ARG1=int",
    "-DSELECT_TYPE_ARG234=fd_set*",
    "-DSELECT_TYPE_RETV=int",
    "-DSEND_QUAL_ARG2=const",
    "-DSEND_TYPE_ARG1=int",
    "-DSEND_TYPE_ARG2=void*",
    "-DSEND_TYPE_ARG3=size_t",
    "-DSEND_TYPE_ARG4=int",
    "-DSEND_TYPE_RETV=ssize_t",
    "-DSIZEOF_CURL_OFF_T=8",
    "-DSIZEOF_INT=4",
    "-DSIZEOF_LONG=8",
    "-DSIZEOF_OFF_T=8",
    "-DSIZEOF_SHORT=2",
    "-DSIZEOF_SIZE_T=8",
    "-DSIZEOF_TIME_T=8",
    "-DSTDC_HEADERS=1",
    "-DSTRERROR_R_TYPE_ARG3=size_t",
    "-DTIME_WITH_SYS_TIME=1",
    "-DUSE_THREADS_POSIX=1",
    "-DUSE_UNIX_SOCKETS=1",

    # Extra defines needed by curl
    "-DBUILDING_LIBCURL",
    "-DCURL_HIDDEN_SYMBOLS",
]

LINUX_CURL_COPTS = [
    "-DHAVE_LINUX_TCP_H=1",
    "-DHAVE_MSG_NOSIGNAL=1",
]

CURL_COPTS = select({
    ":windows": [
        # Disable everything else except HTTP protocol.
        "/DHTTP_ONLY=1",
        "/DCURL_STATICLIB",
        "/DWIN32",
        "/DBUILDING_LIBCURL",
        "/DUSE_WIN32_IDN",
        "/DWANT_IDN_PROTOTYPES",
        "/DUSE_IPV6",
        "/DUSE_WINDOWS_SSPI",
        "/DUSE_SCHANNEL",
    ],
    ":mac": BASE_CURL_COPTS,
    "linux": BASE_CURL_COPTS + LINUX_CURL_COPTS,
})

cc_library(
    name = "curl",
    srcs = glob([
        "lib/**/*.c",
    ]),
    hdrs = glob([
        "include/curl/*.h",
        "lib/**/*.h",
    ]),
    copts = CURL_COPTS + [
        "-DOS=\"os\"",
        "-DCURL_EXTERN_SYMBOL=__attribute__((__visibility__(\"default\")))",
    ],
    includes = [
        "curl/include/",
        "curl/lib/",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "db_drivers",
    srcs = select({
        "windows": glob(["**/*.a"]),
        "mac": [
            "db_drivers/liblmdb/mdb.c",
            "db_drivers/liblmdb/midl.c",
        ],
        "linux": glob(["**/*.a"]),
    }),
    hdrs = glob(["**/liblmdb/*.h"]),
    includes = ["db_drivers"],
)

cc_library(
    name = "easy_logging",
    srcs = glob(["**/*.cc"]),
    hdrs = glob(["**/easylogging++/**/*.h"]),
    includes = ["easylogging++"],
)

cc_library(
    name = "expat",
    srcs = select({
        "windows": glob(["**/*.a"]),
        "mac": glob(["**/*.a"]),
        "linux": glob(["**/*.a"]),
    }),
    hdrs = glob(["**/expat/include/**/*.h"]),
    includes = ["expat"],
)

cc_library(
    name = "json",
    hdrs = glob(["**/json/**/*.hpp"]),
    includes = ["json"],
)

cc_library(
    name = "ldns",
    srcs = select({
        "windows": glob(["**/*.a"]),
        "mac": glob(["**/*.a"]),
        "linux": glob(["**/*.a"]),
    }),
    hdrs = glob(["**/ldns/include/**/*.h"]),
    includes = ["ldns"],
)

cc_library(
    name = "libhidapi",
    srcs = select({
        "windows": glob(["**/*.a"]),
        "mac": glob(["**/*.a"]),
        "linux": glob(["**/*.a"]),
    }),
    hdrs = glob(["**/libhidapi/include/**/*.h"]),
    includes = ["libhidapi"],
)

cc_library(
    name = "liblzma",
    srcs = select({
        "windows": glob(["**/*.a"]),
        "mac": glob(["**/*.a"]),
        "linux": glob(["**/*.a"]),
    }),
    hdrs = glob(["**/liblzma/include/**/*.h"]),
)

cc_library(
    name = "libnorm",
    srcs = select({
        "windows": glob(["build/*.lib"]),
        "mac": ["build/libnorm.a"],
        "linux": glob(["build/*.a"]),
    }),
    hdrs = select({
        "windows": glob(["include/*.h"]),
        "mac": [
            "include/galois.h",
            "include/normApi.h",
            "include/normEncoder.h",
            "include/normEncoderMDP.h",
            "include/normEncoderRS16.h",
            "include/normEncoderRS8.h",
            "include/normFile.h",
            "include/normMessage.h",
            "include/normNode.h",
            "include/normObject.h",
            "include/normPostProcess.h",
            "include/normSegment.h",
            "include/normSession.h",
            "include/normSimAgent.h",
            "include/normVersion.h",
        ],
        "linux": glob(["include/*.h"]),
    }),
    includes = select({
        "windows": ["libnorm/include"],
        "mac": ["libnorm/include"],
        "linux": ["libnorm/include"],
    }),
)

cc_library(
    name = "libreadline",
    srcs = select({
        "windows": glob(["**/*.a"]),
        "mac": glob(["**/*.a"]),
        "linux": glob(["**/*.a"]),
    }),
    hdrs = glob(["**/libreadline/**/*.h"]),
    includes = ["libreadline"],
)

cc_library(
    name = "libsodium",
    srcs = select({
        "windows": glob(["**/*.a"]),
        "mac": glob(["**/*.a"]),
        "linux": glob(["**/*.a"]),
    }),
    hdrs = glob(["**/libsodium/**/*.h"]),
    includes = ["libsodium"],
)

cc_library(
    name = "libudev",
    srcs = glob(["**/*.a"]),
    hdrs = glob(["**/libudev/include/**/*.h"]),
    includes = ["libudev"],
)

cc_library(
    name = "libunbound",
    srcs = select({
        "windows": glob(["**/*.a"]),
        "mac": glob([
            "**/libunbound.*.dylib",
            "**/libunbound.dylib",
        ]),
        "linux": glob(["**/*.so"]),
    }),
    hdrs = glob(["**/libunbound/include/**/*.h"]),
    includes = ["libunbound"],
    linkopts = select({
        "windows": ["-liphlpapi"],
        "mac": [],
        "linux": [],
    }),
    linkstatic = True,
)

cc_library(
    name = "libunwind",
    srcs = select({
        "linux": glob(["**/*.so"]),
        "windows": glob(["**/*.a"]),
        "mac": glob(["**/*.a"]),
    }),
    hdrs = glob(["**/libunwind/include/**/*.h"]),
    includes = ["libunwind"],
)

cc_library(
    name = "libusb",
    srcs = select({
        "windows": glob(["**/*.a"]),
        "mac": [
            "libusb/libusb/core.c",
            "libusb/libusb/descriptor.c",
            "libusb/libusb/hotplug.c",
            "libusb/libusb/io.c",
            "libusb/libusb/os/darwin_usb.c",
            "libusb/libusb/os/events_posix.c",
            "libusb/libusb/os/threads_posix.c",
            "libusb/libusb/strerror.c",
            "libusb/libusb/sync.c",
        ],
        "linux": glob(["**/*.a"]),
    }),
    hdrs = select({
        "windows": glob(["**/libusb/**/*.h"]),
        "mac": glob(["**/libusb/**/*.h"]),
        "linux": glob(["**/libusb/**/*.h"]),
    }),
    includes = select({
        "windows": [
            "libusb",
            "libusb/libusb",
        ],
        "mac": [
            "libusb",
            "libusb/libusb",
        ],
        "linux": [
            "libusb",
            "libusb/libusb",
        ],
    }),
)

cc_library(
    name = "libzmq",
    srcs = select({
        "windows": glob(["**/libzmq.a"]),
        "mac": glob([
            "**/libzmq.*.dylib",
            "**/libzmq.dylib",
        ]),
        "linux": glob(["**/libzmq.a"]),
    }),
    hdrs = glob(["**/libzmq/**/*.h"]),
    includes = ["libzmq"],
)

cc_library(
    name = "lrelease",
    srcs = glob(["**/*.a"]),
    hdrs = glob(["**/lrelease/include/**/*.h"]),
    includes = ["lrelease"],
)

cc_library(
    name = "minissdpd",
    srcs = glob(["**/minissdpd/*.a"]),
    hdrs = glob(["**/minissdpd/*.h"]),
)

cc_library(
    name = "miniupnpc",
    srcs = select({
        "windows": glob([
            "**/miniupnpc/*.a",
        ]),
        "mac": glob(["**/*.a"]),
        "//conditions:default": glob(["**/miniupnpc/*.a"]),
    }),
    hdrs = glob(["**/miniupnpc/**/*.h"]),
    includes = ["miniupnp"],
    linkopts = select({
        "windows": ["-liphlpapi"],
        "mac": [],
        "//conditions:default": [],
    }),
    linkstatic = True,
)

cc_library(
    name = "miniupnpc-async",
    srcs = glob(["**/miniupnpc-async/*.a"]),
    hdrs = glob(["**/miniupnpc-async/*.h"]),
)

cc_library(
    name = "miniupnpc-libevent",
    srcs = glob(["**/miniupnpc-libevent/*.a"]),
    hdrs = glob(["**/miniupnpc-libevent/*.h"]),
)

cc_library(
    name = "miniupnpc-libuv",
    srcs = glob(["**/miniupnpc-libuv/*.a"]),
    hdrs = glob(["**/miniupnpc-libuv/*.h"]),
)

cc_library(
    name = "miniupnpd",
    srcs = glob(["**/miniupnpd/*.a"]),
    hdrs = glob(["**/miniupnpd/*.h"]),
)

cc_library(
    name = "openpgm",
    srcs = select({
        "windows": glob(["**/*.lib"]),
        "mac": glob(["**/*.a"]),
        "linux": glob(["**/*.a"]),
    }),
    hdrs = glob(["**/openpgm/include/**/*.h"]),
    includes = ["openpgm"],
)

cc_library(
    name = "qrcodegen",
    srcs = glob(["**/*.cpp"]),
    hdrs = glob(["**/*.hpp"]),
    includes = ["qrcodegen"],
)

# This doesn't work with all platforms. It only works with x86_64 and maybe not even that.
cc_library(
    name = "randomx",
    srcs = glob(
        [
            "**/*.cpp",
            "**/*.c",
            "**/jit_compiler_x86_static.S",
        ],
        exclude = [
            "**/tests/*",
            "**/jit_compiler_a64.cpp",
            "**/jit_compiler_a64_static.cpp",
        ],
    ),
    hdrs = glob(
        [
            "**/randomx/**/*.h",
            "**/randomx/**/*.hpp",
        ],
        exclude = [
            "**/jit_compiler_a64.hpp",
            "**/jit_compiler_a64_static.hpp",
        ],
    ),
    includes = ["randomx"],
)

cc_library(
    name = "randomx_lib",
    srcs = select({
        "windows": glob(["**/*.a"]),
        "mac": glob(
            [
                "**/randomx/*.cpp",
                "**/randomx/*.c",
                "**/randomx/*.S",
            ],
            exclude = [
                "**/tests/*",
                "**/*x86*",
            ],
        ),
        "linux": glob(["**/*.a"]),
    }),
    hdrs = select({
        "windows": glob(["**/randomx.h"]),
        "mac": glob([
            "**/randomx/**/*.h",
            "**/randomx/**/*.hpp",
        ]),
        "linux": glob(["**/randomx.h"]),
    }),
    includes = ["randomx"],
    linkstatic = True,
)

cc_library(
    name = "rapidjson",
    srcs = [],
    hdrs = glob(["**/include/rapidjson/**/*.h"]),
    includes = ["rapidjson"],
)

cc_library(
    name = "spdlog",
    srcs = glob(["**/*.a"]),
    hdrs = glob(["**/spdlog/**/*.h"]),
    includes = ["spdlog/include"],
)

cc_library(
    name = "supercop64",
    srcs = glob(["**/libmonero-crypto64.a"]),
    hdrs = glob(["**/supercop/include/**/*.h"]),
    includes = ["supercop"],
)

cc_library(
    name = "supercop51",
    srcs = glob(["**/libmonero-crypto.a"]),
    hdrs = glob(["**/supercop/include/**/*.h"]),
    includes = ["supercop"],
)

cc_proto_library(
    name = "messages_cc_proto",
    deps = [":messages_proto"],
)

proto_library(
    name = "messages_proto",
    srcs = glob(["**/messages.proto"]),
    deps = [
    ],
)

cc_library(
    name = "unbound",
    srcs = glob(["**/*.so"]),
    hdrs = glob(["**/unbound/**/*.h"]),
    includes = ["unbound"],
)


cc_library(
    name = "ssl",
    srcs = glob([
        "**/libcrypto.a",
    ]),
    hdrs = select({
        ":windows": glob(["**/openssl/**/*.h"]),
        "mac": glob(["**/openssl/**/*.h"]),
        "linux": glob(["**/ssl/**/*.h"]),
    }),
    includes = ["openssl/include"],
    linkstatic =
        select({
            ":windows": True,
            "mac": False,
            "linux": True,
        }),
)

cc_library(
    name = "crypto",
    srcs = glob([
        "**/libcrypto.a",
    ]),
    hdrs =
        select({
            ":windows": glob(["**/openssl/**/*.h"]),
            "mac": glob(["**/openssl/**/*.h"]),
            "linux": glob(["**/crypto/**/*.h"]),
        }),
    includes = ["openssl/include"],
    linkstatic =
        select({
            ":windows": True,
            "mac": False,
            "linux": True,
        }),
)
